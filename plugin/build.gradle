apply plugin: "com.android.library"
apply plugin: "kotlin-android"

ext.pluginVersionCode = 1
ext.pluginVersionName = "1.0.0"

/*
The ARCore aar library contains the native shared libraries. These are
extracted before building to a temporary directory.
*/
def arcore_libpath = "${buildDir}/arcore-native"

// Create a configuration to mark which aars to extract .so files from
configurations { natives }

android {
    buildToolsVersion = versions.buildTools
    compileSdkVersion versions.compileSdk
    ndkVersion versions.ndkVersion

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode pluginVersionCode
        versionName pluginVersionName
        setProperty("archivesBaseName", "gdarcore.${versionName}")

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11", "-Wall"
                arguments "-DANDROID_STL=c++_static",
                    "-DARCORE_LIBPATH=${arcore_libpath}/jni",
                    "-DARCORE_INCLUDE=${project.rootDir}/plugin/src/main/cpp/include"
            }
        }

        ndk {
            abiFilters "arm64-v8a" // , "armeabi-v7a", "x86", "x86_64"
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlinVersion")
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation("com.google.ar:core:$versions.arcoreVersion")
    natives("com.google.ar:core:$versions.arcoreVersion")
    compileOnly fileTree(dir: 'libs', include: ['godot-lib*.aar'])
}

/*
// When using the aar binary only, the *.gdns and *gdnlib files need to be in the same location
// relative to the `assets` directory, so we recreate the relative directories and copy them prior
// to building the aar binary.
final relativeAddonsConfigDir = "addons/godot_arcore/config/"
final sourceDir = "../demo/$relativeAddonsConfigDir"
final targetDir = "src/main/assets/$relativeAddonsConfigDir"

task copyAddonsConfig(type: Copy) {
    doFirst {
        delete(targetDir)
    }
    from sourceDir
    into targetDir
}

preBuild.dependsOn(copyAddonsConfig)
*/

// Extracts the shared libraries from aars in the natives configuration.
// This is done so that NDK builds can access these libraries.
task extractNativeLibraries() {
    // Extract every time.
    outputs.upToDateWhen { false }

    doFirst {
        configurations.natives.files.each { f ->
            copy {
                from zipTree(f)
                into arcore_libpath
                include "jni/**/*"
            }
        }
    }
}

tasks.whenTaskAdded {
    task-> if (task.name.contains("external") && !task.name.contains("Clean")) {
        task.dependsOn(extractNativeLibraries)
    }
}
